scalar BigInt

type Proof {
  data: String!
}

type ResultBoolean {
  value: Boolean!
  proof: Proof
}

type ResultString {
  value: String!
  proof: Proof
}

type ResultInt {
  value: Int!
  proof: Proof
}

type ResultBigInt {
  value: BigInt!
  proof: Proof
}

type Block {
  cid: String!
  hash: String!
  number: Int!
  timestamp: Int!
  parentHash: String!
}

type Transaction {
  hash: String!
  index: Int!
  from: String!
  to: String!
}

type ResultEvent {
  block: Block!
  tx: Transaction!
  contract: String!
  eventIndex: Int!
  event: Event!
  proof: Proof
}

union Event = TestEvent

type TestEvent {
  param1: String!
  param2: Int!
}

type ResultIPLDBlock {
  block: Block!
  contractAddress: String!
  cid: String!
  kind: String!
  data: String!
}

type Query {
  events(blockHash: String!, contractAddress: String!, name: String): [ResultEvent!]
  eventsInRange(fromBlockNumber: Int!, toBlockNumber: Int!): [ResultEvent!]
  getMethod(blockHash: String!, contractAddress: String!): ResultString!
  _test(blockHash: String!, contractAddress: String!): ResultBigInt!
  exampleEntity(id: String!, blockHash: String!): ExampleEntity!
  getStateByCID(cid: String!): ResultIPLDBlock
  getState(blockHash: String!, contractAddress: String!, kind: String): ResultIPLDBlock
}

type ExampleEntity {
  id: ID!
  count: BigInt!
  param1: String!
  param2: Int!
}

type Mutation {
  watchContract(address: String!, kind: String!, checkpoint: Boolean!, startingBlock: Int): Boolean!
}

type Subscription {
  onEvent: ResultEvent!
}
