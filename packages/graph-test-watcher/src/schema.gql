scalar BigInt

scalar Bytes

scalar BigDecimal

input Block_height {
  hash: Bytes
  number: Int
}

type Proof {
  data: String!
}

type ResultBoolean {
  value: Boolean!
  proof: Proof
}

type ResultString {
  value: String!
  proof: Proof
}

type ResultInt {
  value: Int!
  proof: Proof
}

type ResultBigInt {
  value: BigInt!
  proof: Proof
}

type Block {
  cid: String!
  hash: String!
  number: Int!
  timestamp: Int!
  parentHash: String!
}

type Transaction {
  hash: String!
  index: Int!
  from: String!
  to: String!
}

type ResultEvent {
  block: Block!
  tx: Transaction!
  contract: String!
  eventIndex: Int!
  event: Event!
  proof: Proof
}

union Event = TestEvent

type TestEvent {
  param1: String!
  param2: Int!
}

type ResultIPLDBlock {
  block: Block!
  contractAddress: String!
  cid: String!
  kind: String!
  data: String!
}

type Query {
  events(blockHash: String!, contractAddress: String!, name: String): [ResultEvent!]
  eventsInRange(fromBlockNumber: Int!, toBlockNumber: Int!): [ResultEvent!]
  getMethod(blockHash: String!, contractAddress: String!): ResultString!
  _test(blockHash: String!, contractAddress: String!): ResultBigInt!
  relatedEntity(id: String!, block: Block_height): RelatedEntity!
  exampleEntity(id: String!, block: Block_height): ExampleEntity!
  manyRelatedEntity(id: String!, block: Block_height): ManyRelatedEntity!
  getStateByCID(cid: String!): ResultIPLDBlock
  getState(blockHash: String!, contractAddress: String!, kind: String): ResultIPLDBlock
}

enum EnumType {
  choice1
  choice2
}

type RelatedEntity {
  id: ID!
  paramBigInt: BigInt!
  bigIntArray: [BigInt!]!
}

type ManyRelatedEntity {
  id: ID!
  count: BigInt!
}

type ExampleEntity {
  id: ID!
  count: BigInt!
  paramString: String!
  paramInt: Int!
  paramBoolean: Boolean!
  paramBytes: Bytes!
  paramEnum: EnumType!
  paramBigDecimal: BigDecimal!
  related: RelatedEntity!
  manyRelated: [ManyRelatedEntity!]!
}

type Mutation {
  watchContract(address: String!, kind: String!, checkpoint: Boolean!, startingBlock: Int): Boolean!
}

type Subscription {
  onEvent: ResultEvent!
}
