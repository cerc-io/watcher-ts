//
// Copyright 2021 Vulcanize, Inc.
//

import assert from 'assert';
import BigInt from 'apollo-type-bigint';
import debug from 'debug';

import { ValueResult } from '@vulcanize/util';

import { Indexer } from './indexer';

const log = debug('vulcanize:resolver');

export const createResolvers = async (indexer: Indexer): Promise<any> => {
  assert(indexer);

  return {
    BigInt: new BigInt('bigInt'),

    Event: {
      __resolveType: (obj: any) => {
        assert(obj.__typename);

        return obj.__typename;
      }
    },

    Query: {
      {{#each queries}}
      {{this.name}}: (_: any, { blockHash, contractAddress
      {{~#each this.params}}, {{this.name~}} {{/each}} }: { blockHash: string, contractAddress: string
      {{~#each this.params}}, {{this.name}}: {{this.type~}} {{/each}} }): Promise<ValueResult> => {
        log('{{this.name}}', blockHash, contractAddress
        {{~#each this.params}}, {{this.name~}} {{/each}});
        return indexer.{{this.name}}(blockHash, contractAddress
        {{~#each this.params}}, {{this.name~}} {{/each}});
      }
      {{~#unless @last}},

      {{/unless}}
      {{/each}}

    }
  };
};
