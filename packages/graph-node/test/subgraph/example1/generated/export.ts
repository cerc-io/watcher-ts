// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

// Re-exports
import {
  BigDecimal,
  BigInt,
  ethereum,
  Address,
  ByteArray,
  Bytes,
  Entity,
  Value,
  JSONValue,
  TypedMap,
  JSONValueKind,
  Result,
  Wrapped,
  json
} from '@graphprotocol/graph-ts';

export class JSONValueTypedMap extends TypedMap<string, JSONValue> {}

export class CustomJSONValue extends JSONValue {
  static fromArray(input: Array<JSONValue>): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.ARRAY;
    jsonValue.data = changetype<u32>(input);
    return jsonValue;
  }

  static fromObject(object: TypedMap<string, JSONValue>): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.OBJECT;
    jsonValue.data = changetype<u32>(object);
    return jsonValue;
  }

  static fromNumber(n: string): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.NUMBER;
    jsonValue.data = changetype<u32>(n);
    return jsonValue;
  }

  static fromBoolean(b: boolean): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.BOOL;
    jsonValue.data = b ? 1 : 0;
    return jsonValue;
  }

  static fromString(s: string): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.STRING;
    jsonValue.data = changetype<u32>(s);
    return jsonValue;
  }

  static fromNull(): JSONValue {
    const jsonValue = new JSONValue();
    jsonValue.kind = JSONValueKind.NULL;
    return jsonValue;
  }
}

export class JSONResult extends Result<JSONValue, boolean> {
  constructor (value: JSONValue | null) {
    super();

    if (value) {
      this._value = new Wrapped(value);
    } else {
      this._error = new Wrapped(true);
    }
  }
}

export {
  BigDecimal,
  BigInt,

  ethereum,
  Entity,

  Address,
  ByteArray,
  Bytes,
  Value,
  JSONValue,

  json
}
